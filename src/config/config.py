"""
Configura√ß√µes do Sistema de Triagem M√©dica IoT
"""

import os
import streamlit as st
from datetime import datetime

class Config:
    """Configura√ß√µes da aplica√ß√£o"""
    
    # Ambiente
    DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'
    ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
    
    # Portas
    STREAMLIT_PORT = int(os.getenv('STREAMLIT_SERVER_PORT', '8501'))
    IOT_API_PORT = int(os.getenv('IOT_API_PORT', '5002'))
    
    # Configura√ß√µes de seguran√ßa
    SECRET_KEY = os.getenv('SECRET_KEY', 'triagem-medica-local-2024-secure-key')
    
    # Configura√ß√µes de dados
    DATA_DIR = os.getenv('DATA_DIR', './data')
    
    # Configura√ß√µes do Streamlit
    STREAMLIT_CONFIG = {
        'server.port': STREAMLIT_PORT,
        'server.address': 'localhost',
        'server.headless': False,
        'server.enableCORS': True,
        'server.enableXsrfProtection': True,
        'server.maxUploadSize': 10,
        'browser.gatherUsageStats': False,
        'theme.primaryColor': '#1f77b4',
        'theme.backgroundColor': '#ffffff',
        'theme.secondaryBackgroundColor': '#f0f2f6',
        'theme.textColor': '#262730'
    }
    
    # Configura√ß√µes IoT e Webhook
    WEBHOOK_ENDPOINT = "/webhook"
    ESP32_DEVICE_PREFIX = "ESP32_TERMOMETRO_"

    # URLs para teste do webhook
    WEBHOOK_TEST_URLS = [
        f"http://localhost:{IOT_API_PORT}/webhook",
        f"http://localhost:{IOT_API_PORT}/",
        f"http://127.0.0.1:{IOT_API_PORT}/webhook"
    ]

    # Configura√ß√µes de temperatura para alertas
    TEMPERATURE_THRESHOLDS = {
        'NORMAL_MIN': 35.1,
        'NORMAL_MAX': 37.7,
        'FEVER_MIN': 37.8,
        'FEVER_MAX': 38.9,
        'CRITICAL_MIN': 39.0
    }
    
    @staticmethod
    def init_app():
        """Inicializa configura√ß√µes da aplica√ß√£o"""
        try:
            # Configura√ß√µes da p√°gina
            st.set_page_config(
                page_title="Sistema de Triagem M√©dica IoT",
                page_icon="üè•",
                layout="wide",
                initial_sidebar_state="expanded",
                menu_items={
                    'Get Help': 'https://github.com/seu-usuario/triagem-medica',
                    'Report a bug': 'https://github.com/seu-usuario/triagem-medica/issues',
                    'About': """
                    # Sistema de Triagem M√©dica IoT
                    
                    Sistema de IA para apoio ao diagn√≥stico m√©dico em √°reas vulner√°veis.
                    
                    **Vers√£o:** 2.0  
                    **Ambiente:** Local  
                    **Desenvolvido para:** M√©dicos Sem Fronteiras e √°reas remotas
                    """
                }
            )
            
            # Criar diret√≥rios necess√°rios
            os.makedirs(Config.DATA_DIR, exist_ok=True)
            
            # Log de inicializa√ß√£o
            print(f"üè• Sistema de Triagem M√©dica IoT")
            print(f"üåç Ambiente: {Config.ENVIRONMENT}")
            print(f"üîß Debug: {Config.DEBUG}")
            print(f"üì° Porta Streamlit: {Config.STREAMLIT_PORT}")
            print(f"üå°Ô∏è Porta API IoT: {Config.IOT_API_PORT}")
            print(f"üìÇ Diret√≥rio de dados: {Config.DATA_DIR}")
            print(f"üïê Inicializado em: {datetime.now().isoformat()}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar configura√ß√µes: {str(e)}")
            return False
    
    @staticmethod
    def get_database_url():
        """Retorna URL do banco de dados local"""
        return os.getenv('DATABASE_URL', 'sqlite:///triagem.db')
    
    @staticmethod
    def is_production():
        """Verifica se est√° em produ√ß√£o"""
        return Config.ENVIRONMENT == 'production'
    
    @staticmethod
    def get_version():
        """Retorna vers√£o da aplica√ß√£o"""
        return "2.0.0-local"

# Inicializar configura√ß√µes ao importar
if __name__ != "__main__":
    Config.init_app() 